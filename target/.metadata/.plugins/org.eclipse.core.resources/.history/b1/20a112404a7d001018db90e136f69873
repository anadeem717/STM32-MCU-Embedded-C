/*
 * stmf46xx.h
 *
 *  Created on: Aug 5, 2025
 *      Author: arees
 */

#ifndef INC_STMF446XX_H_
#define INC_STMF446XX_H_

#include <stdint.h>

/*
 * base addresses of flash and SRAM memories
 */

#define FLASH_BASEADDR			0x08000000U
#define SRAM1_BASEADDR			0x20000000U
#define SRAM2_BASEADDR			0x2001C000U
#define ROM_BASEADDR			0x1FFF0000U
#define SRAM 					SRAM1_BASEADDR

/*
 * AHBx and APBx bus peripheral base addresses
 */

#define PERIPH_BASE				0X40000000U
#define APB1PERIPH_BASE			PERIPH_BASE
#define APB2PERIPH_BASE			0x40010000U
#define AHB1PERIPH_BASE			0x40020000U
#define AHB2PERIPH_BASE			0x50000000U

/*
 * Base addresses of peripherals that are hanging on AHB1 bus
 */

#define GPIOA_BASEADDR			(AHB1PERIPH_BASE + 0X0000)
#define GPIOB_BASEADDR			(AHB1PERIPH_BASE + 0X0400)
#define GPIOC_BASEADDR			(AHB1PERIPH_BASE + 0X0800)
#define GPIOD_BASEADDR			(AHB1PERIPH_BASE + 0X0C00)
#define GPIOE_BASEADDR			(AHB1PERIPH_BASE + 0X1000)
#define GPIOF_BASEADDR			(AHB1PERIPH_BASE + 0X1400)
#define GPIOG_BASEADDR			(AHB1PERIPH_BASE + 0X1800)
#define GPIOH_BASEADDR			(AHB1PERIPH_BASE + 0X1C00)
#define RCC_BASEADDR			(AHB1PERIPH_BASE + 0X3800)

/*
 * Base addresses of peripherals that are hanging on APB1 bus
 */

#define TIM2_BASEADDR        (APB1PERIPH_BASE + 0x0000)
#define TIM3_BASEADDR        (APB1PERIPH_BASE + 0x0400)
#define TIM4_BASEADDR        (APB1PERIPH_BASE + 0x0800)
#define TIM5_BASEADDR        (APB1PERIPH_BASE + 0x0C00)
#define TIM6_BASEADDR        (APB1PERIPH_BASE + 0x1000)
#define TIM7_BASEADDR        (APB1PERIPH_BASE + 0x1400)
#define TIM12_BASEADDR       (APB1PERIPH_BASE + 0x1800)
#define TIM13_BASEADDR       (APB1PERIPH_BASE + 0x1C00)
#define TIM14_BASEADDR       (APB1PERIPH_BASE + 0x2000)
#define RTC_BKP_BASEADDR     (APB1PERIPH_BASE + 0x2800)
#define WWDG_BASEADDR        (APB1PERIPH_BASE + 0x2C00)
#define IWDG_BASEADDR        (APB1PERIPH_BASE + 0x3000)
#define SPI2_BASEADDR        (APB1PERIPH_BASE + 0x3800)
#define SPI3_BASEADDR        (APB1PERIPH_BASE + 0x3C00)
#define SPDIFRX_BASEADDR     (APB1PERIPH_BASE + 0x4000)
#define USART2_BASEADDR      (APB1PERIPH_BASE + 0x4400)
#define USART3_BASEADDR      (APB1PERIPH_BASE + 0x4800)
#define UART4_BASEADDR       (APB1PERIPH_BASE + 0x4C00)
#define UART5_BASEADDR       (APB1PERIPH_BASE + 0x5000)
#define I2C1_BASEADDR        (APB1PERIPH_BASE + 0x5400)
#define I2C2_BASEADDR        (APB1PERIPH_BASE + 0x5800)
#define I2C3_BASEADDR        (APB1PERIPH_BASE + 0x5C00)
#define CAN1_BASEADDR        (APB1PERIPH_BASE + 0x6400)
#define CAN2_BASEADDR        (APB1PERIPH_BASE + 0x6800)
#define HDMI_CEC_BASEADDR    (APB1PERIPH_BASE + 0x6C00)
#define PWR_BASEADDR         (APB1PERIPH_BASE + 0x7000)
#define DAC_BASEADDR         (APB1PERIPH_BASE + 0x7400)


/*
 * Base addresses of peripherals that are hanging on APB2 bus
 */

#define TIM1_BASEADDR        (APB2PERIPH_BASE + 0x0000)
#define TIM8_BASEADDR        (APB2PERIPH_BASE + 0x0400)
#define USART1_BASEADDR      (APB2PERIPH_BASE + 0x1000)
#define USART6_BASEADDR      (APB2PERIPH_BASE + 0x1400)
#define ADC1_2_3_BASEADDR    (APB2PERIPH_BASE + 0x2000)
#define SDMMC_BASEADDR       (APB2PERIPH_BASE + 0x2C00) // SDIO
#define SPI1_BASEADDR        (APB2PERIPH_BASE + 0x3000)
#define SPI4_BASEADDR        (APB2PERIPH_BASE + 0x3400)
#define SYSCFG_BASEADDR      (APB2PERIPH_BASE + 0x3800)
#define EXTI_BASEADDR        (APB2PERIPH_BASE + 0x3C00)
#define TIM9_BASEADDR        (APB2PERIPH_BASE + 0x4000)
#define TIM10_BASEADDR       (APB2PERIPH_BASE + 0x4400)
#define TIM11_BASEADDR       (APB2PERIPH_BASE + 0x4800)
#define SAI1_BASEADDR        (APB2PERIPH_BASE + 0x5800)
#define SAI2_BASEADDR        (APB2PERIPH_BASE + 0x5C00)

/*
 * peripheral register definition structures
 */

typedef struct
{
	volatile uint32_t MODER;
	volatile uint32_t OTYPER;
	volatile uint32_t OSPEEDR;
	volatile uint32_t PUPDR;
	volatile uint32_t IDR;
	volatile uint32_t ODR;
	volatile uint32_t BSRR;
	volatile uint32_t LCKR;
	volatile uint32_t AFRL;
	volatile uint32_t AFR[2]; // AFR[0] alt func LOW reg , AFR[1] alt func HIGH reg
}GPIO_RegDef_t;

typedef struct
{
    volatile uint32_t CR;            /* 0x00 */
    volatile uint32_t PLLCFGR;       /* 0x04 */
    volatile uint32_t CFGR;          /* 0x08 */
    volatile uint32_t CIR;           /* 0x0C */

    volatile uint32_t AHB1RSTR;      /* 0x10 */
    volatile uint32_t AHB2RSTR;      /* 0x14 */
    volatile uint32_t AHB3RSTR;      /* 0x18 */
    uint32_t          RESERVED0;     /* 0x1C */

    volatile uint32_t APB1RSTR;      /* 0x20 */
    volatile uint32_t APB2RSTR;      /* 0x24 */
    uint32_t          RESERVED1[2];  /* 0x28, 0x2C */

    volatile uint32_t AHB1ENR;       /* 0x30 */
    volatile uint32_t AHB2ENR;       /* 0x34 */
    volatile uint32_t AHB3ENR;       /* 0x38 */
    uint32_t          RESERVED2;     /* 0x3C */

    volatile uint32_t APB1ENR;       /* 0x40 */
    volatile uint32_t APB2ENR;       /* 0x44 */
    uint32_t          RESERVED3[2];  /* 0x48, 0x4C */

    volatile uint32_t AHB1LPENR;     /* 0x50 */
    volatile uint32_t AHB2LPENR;     /* 0x54 */
    volatile uint32_t AHB3LPENR;     /* 0x58 */
    uint32_t          RESERVED4;     /* 0x5C */

    volatile uint32_t APB1LPENR;     /* 0x60 */
    volatile uint32_t APB2LPENR;     /* 0x64 */
    uint32_t          RESERVED5[2];  /* 0x68, 0x6C */

    volatile uint32_t BDCR;          /* 0x70 */
    volatile uint32_t CSR;           /* 0x74 */
    uint32_t          RESERVED6[2];  /* 0x78, 0x7C */

    volatile uint32_t SSCGR;         /* 0x80 */
    volatile uint32_t PLLI2SCFGR;    /* 0x84 */
    volatile uint32_t PLLSAICFGR;    /* 0x88 */
    volatile uint32_t DCKCFGR;       /* 0x8C */
    volatile uint32_t CKGATENR;      /* 0x90 */
    volatile uint32_t DCKCFGR2;      /* 0x94 */
} RCC_RegDef_t;



 /*
  * peripheral definitions
  */
#define GPIOA		((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB		((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC		((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD		((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE		((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF		((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG		((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH		((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI		((GPIO_RegDef_t*)GPIOI_BASEADDR)

#define RCC 		((RCC_RegDef_t*)RCC_BASEADDR)


/*
 * clock enable macros for GPIOx peripherals
 */
#define GPIOA_PCLK_EN()	( RCC->AHB1ENR |= (1 << 0))
#define GPIOB_PCLK_EN()	( RCC->AHB1ENR |= (1 << 1))
#define GPIOC_PCLK_EN()	( RCC->AHB1ENR |= (1 << 2))
#define GPIOD_PCLK_EN()	( RCC->AHB1ENR |= (1 << 3))
#define GPIOE_PCLK_EN()	( RCC->AHB1ENR |= (1 << 4))
#define GPIOF_PCLK_EN()	( RCC->AHB1ENR |= (1 << 5))
#define GPIOG_PCLK_EN()	( RCC->AHB1ENR |= (1 << 6))
#define GPIOH_PCLK_EN()	( RCC->AHB1ENR |= (1 << 7))

/*
 * clock enable macros for I2Cx peripherals
 */
#define I2C1_PCLK_EN() 	( RCC->APB1ENR |= (1 << 21))
#define I2C2_PCLK_EN() 	( RCC->APB1ENR |= (1 << 22))
#define I2C3_PCLK_EN() 	( RCC->APB1ENR |= (1 << 23))

/*
 * clock enable macros for SPIx peripherals
 */
#define SPI1_PCLK_EN() 	( RCC->APB2ENR |= (1 << 12))
#define SPI2_PCLK_EN() 	( RCC->APB1ENR |= (1 << 14))
#define SPI3_PCLK_EN() 	( RCC->APB1ENR |= (1 << 15))
#define SPI4_PCLK_EN()	( RCC->APB2ENR |= (1 << 13))

/*
 * clock enable macros for USARTx peripherals
 */
#define USART1_PCLK_EN()   ( RCC->APB2ENR |= (1 << 4) )
#define USART2_PCLK_EN()   ( RCC->APB1ENR |= (1 << 17) )
#define USART3_PCLK_EN()   ( RCC->APB1ENR |= (1 << 18) )
#define UART4_PCLK_EN()    ( RCC->APB1ENR |= (1 << 19) )
#define UART5_PCLK_EN()    ( RCC->APB1ENR |= (1 << 20) )
#define USART6_PCLK_EN()   ( RCC->APB2ENR |= (1 << 5) )

/*
 * clock enable macros for SYSCFG peripheral
 */
#define SYSCFG_PCLK_EN()   ( RCC->APB2ENR |= (1 << 14) )

/*
 * clock disable macros for GPIOx peripherals
 */
#define GPIOA_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 0) )
#define GPIOB_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 1) )
#define GPIOC_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 2) )
#define GPIOD_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 3) )
#define GPIOE_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 4) )
#define GPIOF_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 5) )
#define GPIOG_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 6) )
#define GPIOH_PCLK_DI()    ( RCC->AHB1ENR &= ~(1 << 7) )

/*
 * clock disable macros for I2Cx peripherals
 */
#define I2C1_PCLK_DI()     ( RCC->APB1ENR &= ~(1 << 21) )
#define I2C2_PCLK_DI()     ( RCC->APB1ENR &= ~(1 << 22) )
#define I2C3_PCLK_DI()     ( RCC->APB1ENR &= ~(1 << 23) )

/*
 * clock disable macros for SPIx peripherals
 */
#define SPI1_PCLK_DI()     ( RCC->APB2ENR &= ~(1 << 12) )
#define SPI2_PCLK_DI()     ( RCC->APB1ENR &= ~(1 << 14) )
#define SPI3_PCLK_DI()     ( RCC->APB1ENR &= ~(1 << 15) )
#define SPI4_PCLK_DI()     ( RCC->APB2ENR &= ~(1 << 13) )

/*
 * clock disable macros for USARTx peripherals
 */
#define USART1_PCLK_DI()   ( RCC->APB2ENR &= ~(1 << 4) )
#define USART2_PCLK_DI()   ( RCC->APB1ENR &= ~(1 << 17) )
#define USART3_PCLK_DI()   ( RCC->APB1ENR &= ~(1 << 18) )
#define UART4_PCLK_DI()    ( RCC->APB1ENR &= ~(1 << 19) )
#define UART5_PCLK_DI()    ( RCC->APB1ENR &= ~(1 << 20) )
#define USART6_PCLK_DI()   ( RCC->APB2ENR &= ~(1 << 5) )

/*
 * clock disable macros for SYSCFG peripheral
 */
#define SYSCFG_PCLK_DI()   ( RCC->APB2ENR &= ~(1 << 14) )








#endif /* INC_STMF446XX_H_ */
